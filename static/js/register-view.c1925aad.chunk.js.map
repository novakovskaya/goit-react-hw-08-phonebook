{"version":3,"file":"static/js/register-view.c1925aad.chunk.js","mappings":"uRACA,GAAgB,UAAY,gCAAgC,MAAQ,4BAA4B,KAAO,2BAA2B,MAAQ,6B,UCSpIA,GAAQC,EAAAA,EAAAA,GAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAM,wBAuGZ,EAlGqB,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACMC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,IAEpBC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBX,EAAR,EAAQA,KAAMY,EAAd,EAAcA,MAEd,OAAQZ,GACN,IAAK,OACH,OAAOC,EAAQW,GACjB,IAAK,QACH,OAAOT,EAASS,GAClB,IAAK,WACH,OAAOP,EAAYO,GACrB,QACE,SAaN,OACE,iBAAKC,UAAWC,EAAAA,UAAhB,WACE,eAAID,UAAWC,EAAAA,MAAf,sBAEA,kBAAMC,aAAa,MAAMC,SAbR,SAAAN,GACnBA,EAAMO,iBAENpB,EAASqB,EAAAA,EAAAA,SAAwB,CAAElB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAChDH,EAAQ,IACRE,EAAS,IACTE,EAAY,KAOuCQ,UAAWC,EAAAA,KAA5D,WACE,UAACK,EAAA,EAAD,CAAe3B,MAAOA,EAAtB,WACE,SAAC4B,EAAA,EAAD,CACEP,UAAWC,EAAAA,MACXO,MAAM,YACNC,KAAK,OACLtB,KAAK,OACLY,MAAOZ,EACPuB,OAAO,QACPC,KAAK,QACLC,MAAM,UACNC,QAAQ,WACRC,SAAUlB,KAGZ,SAACW,EAAA,EAAD,CACEP,UAAWC,EAAAA,MACXO,MAAM,QACNC,KAAK,QACLtB,KAAK,QACLY,MAAOV,EACPsB,KAAK,QACLD,OAAO,QACPE,MAAM,UACNC,QAAQ,WACRC,SAAUlB,KAGZ,SAACW,EAAA,EAAD,CACEP,UAAWC,EAAAA,MACXO,MAAM,WACNC,KAAK,WACLtB,KAAK,WACL4B,GAAG,WACHhB,MAAOR,EACPmB,OAAO,QACPC,KAAK,QACLC,MAAM,UACNC,QAAQ,WACRC,SAAUlB,KAGZ,SAACoB,EAAA,EAAD,CACEP,KAAK,SACLT,UAAWC,EAAAA,OACXY,QAAQ,YACRF,KAAK,QACLC,MAAM,UALR,wBAWDnB,IACC,SAACwB,EAAA,EAAD,CAAOC,SAAS,QAAhB","sources":["webpack://goit-react-hw-08-phonebook/./src/views/RegisterView/RegisterView.module.scss?41bf","views/RegisterView/RegisterView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"RegisterView_Container__DMKfp\",\"Title\":\"RegisterView_Title__4ddWW\",\"Form\":\"RegisterView_Form__+bd7z\",\"Input\":\"RegisterView_Input__NdZR7\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authSelectors, authOperations } from 'redux/auth';\n\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Alert from '@mui/material/Alert';\nimport styles from './RegisterView.module.scss';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: 'rgb(87, 115, 246)',\n    },\n  },\n});\n\nconst RegisterView = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const error = useSelector(authSelectors.getError);\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    dispatch(authOperations.register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <div className={styles.Container}>\n      <h1 className={styles.Title}>Sign Up</h1>\n\n      <form autoComplete=\"off\" onSubmit={handleSubmit} className={styles.Form}>\n        <ThemeProvider theme={theme}>\n          <TextField\n            className={styles.Input}\n            label=\"Your name\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            margin=\"dense\"\n            size=\"small\"\n            color=\"primary\"\n            variant=\"standard\"\n            onChange={handleChange}\n          />\n\n          <TextField\n            className={styles.Input}\n            label=\"Email\"\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            size=\"small\"\n            margin=\"dense\"\n            color=\"primary\"\n            variant=\"standard\"\n            onChange={handleChange}\n          />\n\n          <TextField\n            className={styles.Input}\n            label=\"Password\"\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            value={password}\n            margin=\"dense\"\n            size=\"small\"\n            color=\"primary\"\n            variant=\"standard\"\n            onChange={handleChange}\n          />\n\n          <Button\n            type=\"submit\"\n            className={styles.Button}\n            variant=\"contained\"\n            size=\"large\"\n            color=\"primary\"\n          >\n            Sign Up\n          </Button>\n        </ThemeProvider>\n\n        {error && (\n          <Alert severity=\"error\">\n            This username is already taken, please choose a different one.\n          </Alert>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default RegisterView;\n"],"names":["theme","createTheme","palette","primary","main","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","error","useSelector","authSelectors","handleChange","event","target","value","className","styles","autoComplete","onSubmit","preventDefault","authOperations","ThemeProvider","TextField","label","type","margin","size","color","variant","onChange","id","Button","Alert","severity"],"sourceRoot":""}