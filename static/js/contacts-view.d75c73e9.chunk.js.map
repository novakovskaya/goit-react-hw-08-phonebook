{"version":3,"file":"static/js/contacts-view.d75c73e9.chunk.js","mappings":"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","sources":["../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/contacts-selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/Section/Section.module.scss?893f","components/Section/Section.js","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.scss?6b75","components/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.scss?e1a7","components/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.scss?573d","components/Filter/Filter.js","views/ContactsView.js"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function () {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getIsLoading = state => state.contacts.loading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"Section\":\"Section_Section__PObfM\",\"Title\":\"Section_Title__fnSR0\"};","import PropTypes from 'prop-types';\nimport styles from './Section.module.scss';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <section className={styles.Section}>\n      <h1 className={styles.Title}>{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"ContactForm_Form__4h1MS\",\"Label\":\"ContactForm_Label__bcOrV\",\"Input\":\"ContactForm_Input__LESLa\",\"Button\":\"ContactForm_Button__A3eWY\"};","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from 'redux/contacts';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\n\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport styles from './ContactForm.module.scss';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: 'rgb(87, 115, 246)',\n    },\n  },\n});\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const addContact = contact => {\n    const contactFind = contacts.find(({ name }) => name === contact.name);\n\n    contactFind\n      ? toast(`❗️ ${name} is already in contacts.`)\n      : dispatch(contactsOperations.addContact(contact));\n  };\n\n  const handleInput = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    addContact({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.Form} onSubmit={handleSubmit}>\n      <label className={styles.Label}>\n        Name\n        <input\n          className={styles.Input}\n          id={nanoid()}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInput}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label className={styles.Label}>\n        Number\n        <input\n          className={styles.Input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInput}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <ThemeProvider theme={theme}>\n        <Button\n          type=\"submit\"\n          className={styles.Button}\n          variant=\"contained\"\n          size=\"merge\"\n          color=\"primary\"\n        >\n          Add contact\n        </Button>\n      </ThemeProvider>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"List\":\"ContactList_List__KNcoV\",\"Item\":\"ContactList_Item__ehwu1\",\"Contact\":\"ContactList_Contact__VJ7Zy\",\"Number\":\"ContactList_Number__F-UBQ\",\"Button\":\"ContactList_Button__YtAAR\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from 'redux/contacts';\n\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport styles from './ContactList.module.scss';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: 'rgb(87, 115, 246)',\n    },\n  },\n});\n\nexport const ContactList = () => {\n  const onFilteredContacts = useSelector(contactsSelectors.getFilteredContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  return (\n    <ul className={styles.List}>\n      {onFilteredContacts.map(({ id, name, number }) => (\n        <li key={id} className={styles.Item}>\n          <p className={styles.Contact}>{name}:</p>\n          <p className={styles.Number}>{number}</p>\n\n          <ThemeProvider theme={theme}>\n            <Button\n              type=\"button\"\n              className={styles.Button}\n              variant=\"contained\"\n              size=\"small\"\n              color=\"primary\"\n              onClick={() => onDeleteContact(id)}\n            >\n              Delete\n            </Button>\n          </ThemeProvider>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Label\":\"Filter_Label__xjsA9\",\"Input\":\"Filter_Input__-FfdL\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors, contactsActions } from 'redux/contacts';\nimport styles from './Filter.module.scss';\n\nexport const Filter = () => {\n  const value = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  const onFindContact = event =>\n    dispatch(contactsActions.filterContacts(event.target.value));\n\n  return (\n    <label className={styles.Label}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        className={styles.Input}\n        onChange={onFindContact}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from 'redux/contacts';\nimport { TailSpin } from 'react-loader-spinner';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Section } from 'components/Section';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\n\nconst ContactsView = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(contactsSelectors.getIsLoading);\n  const isError = useSelector(contactsSelectors.getError);\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter />\n        {isLoading ? (\n          <TailSpin\n            heigth=\"80\"\n            width=\"80\"\n            color=\"#5773f6\"\n            ariaLabel=\"loading\"\n          />\n        ) : (\n          <ContactList />\n        )}\n        {isError && toast.error('We were unable to load contacts!')}\n      </Section>\n      <ToastContainer autoClose={1500} />\n    </>\n  );\n};\n\nexport default ContactsView;\n"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getContacts","state","contacts","items","getFilter","filter","getIsLoading","loading","getError","error","getFilteredContacts","normalizedFilter","toLowerCase","includes","Section","title","children","className","styles","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","theme","createTheme","palette","primary","main","ContactForm","useState","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","handleInput","event","target","onSubmit","contact","preventDefault","toast","contactsOperations","type","onChange","pattern","required","ThemeProvider","Button","variant","color","ContactList","onFilteredContacts","onClick","onDeleteContact","Filter","contactsActions","isLoading","isError","useEffect","heigth","width","ariaLabel","autoClose"],"sourceRoot":""}